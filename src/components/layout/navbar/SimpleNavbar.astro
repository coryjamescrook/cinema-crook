---
import { Text } from '@components/ui/text/index.astro';
import { NavbarLayout } from '@components/layout/navbarLayout/index.astro';

// i18n imports
import { DEFAULT_LANG } from '@src/i18n/utils';
const locale = Astro.params.lang || DEFAULT_LANG;
// Receive translations and locale from parent
const { common } = Astro.props.pageContent;

// Determine the base path based on the current locale.
// If locale is null (i18n is disabled), basePath will be an empty string.
const basePath = locale ? `/${locale}` : '';

//
const langSwitherType = 'simple'; // Default type: simple
const themeToggleType = 'simple'; // Default type: simple
---

{/* Navbar */}
<NavbarLayout variant="fixed" aria-label="Main Navigation">
  {/* Left: Logo */}
  <Text size="lead_in_text" class="font-bold" href={basePath || '/'}>{common.brand}</Text>

  {/* Right: Navigation */}
  <div class="flex items-center">
    {/* Mobile: Language & Theme Switch */}
    <div class="md:hidden flex items-center space-x-4">
    </div>

    {/* Hamburger Button (Mobile) */}
    <button
      id="hamburger-button"
      class="md:hidden p-2 rounded-sm focus:outline-hidden focus:ring-2 focus:ring-inset"
      aria-label="Toggle Navigation"
      aria-expanded="false"
      type="button"
    >
      <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>
  </div>
</NavbarLayout>

{/* JavaScript for Mobile Menu Toggle */}
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const hamburgerButton = document.querySelector('#hamburger-button');
    const mobileMenu = document.querySelector('#mobile-menu');

    if (hamburgerButton && mobileMenu) {
      // Toggle mobile menu on hamburger button click
      hamburgerButton.addEventListener('click', (event) => {
        const isExpanded = hamburgerButton.getAttribute('aria-expanded') === 'true';
        hamburgerButton.setAttribute('aria-expanded', !isExpanded);
        mobileMenu.classList.toggle('hidden');
        // Prevent the click event from bubbling up
        event.stopPropagation();
      });

      // Close the mobile menu if clicking outside of it when it's open
      document.addEventListener('click', (event) => {
        // Check if the mobile menu is open and the click target is outside both the hamburger button and the mobile menu
        if (
          !mobileMenu.classList.contains('hidden') &&
          !hamburgerButton.contains(event.target) &&
          !mobileMenu.contains(event.target)
        ) {
          mobileMenu.classList.add('hidden');
          hamburgerButton.setAttribute('aria-expanded', 'false');
        }
      });
    }
  });
</script>
